// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Slavestefan.PicAutoPost.Model;

namespace Slavestefan.PicAutoPost.Model.Migrations
{
    [DbContext(typeof(PicAutoPostContext))]
    [Migration("20191214052117_InitalCreate")]
    partial class InitalCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Slavestefan.PicAutoPost.Model.Picture", b =>
                {
                    b.Property<Guid>("IdPicture")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PicturePoolIdPicturePool")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Raw")
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid?>("UserIdUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdPicture");

                    b.HasIndex("PicturePoolIdPicturePool");

                    b.HasIndex("UserIdUser");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("Slavestefan.PicAutoPost.Model.PicturePool", b =>
                {
                    b.Property<Guid>("IdPicturePool")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OwnerIdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PostConfigurationIdConfiguration")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdPicturePool");

                    b.HasIndex("OwnerIdUser");

                    b.HasIndex("PostConfigurationIdConfiguration");

                    b.ToTable("PicturePool");
                });

            modelBuilder.Entity("Slavestefan.PicAutoPost.Model.PostConfiguration", b =>
                {
                    b.Property<Guid>("IdConfiguration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsRunning")
                        .HasColumnType("bit");

                    b.Property<int>("PostingIntervalInMinutes")
                        .HasColumnType("int");

                    b.HasKey("IdConfiguration");

                    b.ToTable("Configurations");
                });

            modelBuilder.Entity("Slavestefan.PicAutoPost.Model.User", b =>
                {
                    b.Property<Guid>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("DiscordId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdUser");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Slavestefan.PicAutoPost.Model.Picture", b =>
                {
                    b.HasOne("Slavestefan.PicAutoPost.Model.PicturePool", null)
                        .WithMany("Pictures")
                        .HasForeignKey("PicturePoolIdPicturePool");

                    b.HasOne("Slavestefan.PicAutoPost.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserIdUser");
                });

            modelBuilder.Entity("Slavestefan.PicAutoPost.Model.PicturePool", b =>
                {
                    b.HasOne("Slavestefan.PicAutoPost.Model.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerIdUser");

                    b.HasOne("Slavestefan.PicAutoPost.Model.PostConfiguration", null)
                        .WithMany("Pool")
                        .HasForeignKey("PostConfigurationIdConfiguration");
                });
#pragma warning restore 612, 618
        }
    }
}
