// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Slavestefan.Aphrodite.Model;

namespace Slavestefan.Aphrodite.Model.Migrations
{
    [DbContext(typeof(PicAutoPostContext))]
    [Migration("20200808174018_v14_CounterHistoryTimestamp")]
    partial class v14_CounterHistoryTimestamp
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Slavestefan.Aphrodite.Model.BotConfiguration", b =>
                {
                    b.Property<Guid>("IdBotConfiguration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("ValueBool")
                        .HasColumnType("bit");

                    b.Property<int>("ValueInt")
                        .HasColumnType("int");

                    b.Property<string>("ValueString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ValueUlong")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("IdBotConfiguration");

                    b.HasIndex("ChannelId", "Key")
                        .IsUnique()
                        .HasFilter("[Key] IS NOT NULL");

                    b.ToTable("BotConfigurations");
                });

            modelBuilder.Entity("Slavestefan.Aphrodite.Model.Picture", b =>
                {
                    b.Property<Guid>("IdPicture")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Hash")
                        .IsRequired()
                        .HasColumnType("varbinary(900)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PicturePoolIdPicturePool")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Raw")
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid?>("UserIdUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdPicture");

                    b.HasIndex("PicturePoolIdPicturePool");

                    b.HasIndex("UserIdUser");

                    b.HasIndex("Hash", "UserIdUser")
                        .IsUnique()
                        .HasFilter("[UserIdUser] IS NOT NULL");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("Slavestefan.Aphrodite.Model.PicturePool", b =>
                {
                    b.Property<Guid>("IdPicturePool")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OwnerIdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PostConfigurationIdConfiguration")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdPicturePool");

                    b.HasIndex("OwnerIdUser");

                    b.HasIndex("PostConfigurationIdConfiguration");

                    b.ToTable("PicturePool");
                });

            modelBuilder.Entity("Slavestefan.Aphrodite.Model.PostConfiguration", b =>
                {
                    b.Property<Guid>("IdConfiguration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("IsInSithMode")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRunning")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastPost")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxPostPerInterval")
                        .HasColumnType("int");

                    b.Property<int>("MaxPostingIntervalInMinutes")
                        .HasColumnType("int");

                    b.Property<int>("MinPostPerInterval")
                        .HasColumnType("int");

                    b.Property<int>("MinPostingIntervalInMinutes")
                        .HasColumnType("int");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("IdConfiguration");

                    b.ToTable("Configurations");
                });

            modelBuilder.Entity("Slavestefan.Aphrodite.Model.Tasks.MultiSet", b =>
                {
                    b.Property<Guid>("IdMultiSet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OwnerIdUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdMultiSet");

                    b.HasIndex("OwnerIdUser");

                    b.ToTable("MultiSet");
                });

            modelBuilder.Entity("Slavestefan.Aphrodite.Model.Tasks.MultiSetTaskSet", b =>
                {
                    b.Property<Guid>("IdMultiSetTaskSet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdMultiSet")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdTaskSet")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdMultiSetTaskSet");

                    b.HasIndex("IdMultiSet");

                    b.HasIndex("IdTaskSet");

                    b.ToTable("MultiSetTaskSet");
                });

            modelBuilder.Entity("Slavestefan.Aphrodite.Model.Tasks.Task", b =>
                {
                    b.Property<Guid>("IdTask")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TaskSetIdTaskSet")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdTask");

                    b.HasIndex("TaskSetIdTaskSet");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Slavestefan.Aphrodite.Model.Tasks.TaskHistory", b =>
                {
                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PickerIdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TaskIdTask")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Time");

                    b.HasIndex("PickerIdUser");

                    b.HasIndex("TaskIdTask");

                    b.ToTable("TaskHistories");
                });

            modelBuilder.Entity("Slavestefan.Aphrodite.Model.Tasks.TaskSet", b =>
                {
                    b.Property<Guid>("IdTaskSet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("DoAllowMultiroll")
                        .HasColumnType("bit");

                    b.Property<bool>("DoesMultirollRepeat")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OwnerIdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RecipientIdUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdTaskSet");

                    b.HasIndex("OwnerIdUser");

                    b.HasIndex("RecipientIdUser");

                    b.ToTable("TaskSets");
                });

            modelBuilder.Entity("Slavestefan.Aphrodite.Model.Tracker.Counter", b =>
                {
                    b.Property<Guid>("IdCounter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CompletedAmount")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserIdUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdCounter");

                    b.HasIndex("UserIdUser");

                    b.ToTable("Counters");
                });

            modelBuilder.Entity("Slavestefan.Aphrodite.Model.Tracker.CounterHistory", b =>
                {
                    b.Property<Guid>("IdCounterHistory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AmountChanged")
                        .HasColumnType("int");

                    b.Property<Guid>("ByUserIdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ChangeType")
                        .HasColumnType("int");

                    b.Property<Guid>("CounterIdCounter")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("IdCounterHistory");

                    b.HasIndex("ByUserIdUser");

                    b.HasIndex("CounterIdCounter");

                    b.ToTable("CounterHistory");
                });

            modelBuilder.Entity("Slavestefan.Aphrodite.Model.Users.OwnerSlaveRelationship", b =>
                {
                    b.Property<Guid>("IdOwnerSlaveRelationship")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OwnerIdUser")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SlaveIdUser")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("IdOwnerSlaveRelationship");

                    b.HasIndex("OwnerIdUser");

                    b.HasIndex("SlaveIdUser", "OwnerIdUser")
                        .IsUnique();

                    b.ToTable("OwnerSlaveRelationships");
                });

            modelBuilder.Entity("Slavestefan.Aphrodite.Model.Users.User", b =>
                {
                    b.Property<Guid>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("DiscordId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdUser");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Slavestefan.Aphrodite.Model.Users.UserAlias", b =>
                {
                    b.Property<Guid>("IdUserAlias")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserIdUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdUserAlias");

                    b.HasIndex("UserIdUser");

                    b.ToTable("UserAliases");
                });

            modelBuilder.Entity("Slavestefan.Aphrodite.Model.Picture", b =>
                {
                    b.HasOne("Slavestefan.Aphrodite.Model.PicturePool", null)
                        .WithMany("Pictures")
                        .HasForeignKey("PicturePoolIdPicturePool");

                    b.HasOne("Slavestefan.Aphrodite.Model.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserIdUser");
                });

            modelBuilder.Entity("Slavestefan.Aphrodite.Model.PicturePool", b =>
                {
                    b.HasOne("Slavestefan.Aphrodite.Model.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerIdUser");

                    b.HasOne("Slavestefan.Aphrodite.Model.PostConfiguration", null)
                        .WithMany("Pool")
                        .HasForeignKey("PostConfigurationIdConfiguration");
                });

            modelBuilder.Entity("Slavestefan.Aphrodite.Model.Tasks.MultiSet", b =>
                {
                    b.HasOne("Slavestefan.Aphrodite.Model.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerIdUser");
                });

            modelBuilder.Entity("Slavestefan.Aphrodite.Model.Tasks.MultiSetTaskSet", b =>
                {
                    b.HasOne("Slavestefan.Aphrodite.Model.Tasks.MultiSet", "MultiSet")
                        .WithMany("MultiSetTaskSets")
                        .HasForeignKey("IdMultiSet")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Slavestefan.Aphrodite.Model.Tasks.TaskSet", "TaskSet")
                        .WithMany("MultiSetTaskSets")
                        .HasForeignKey("IdTaskSet")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Slavestefan.Aphrodite.Model.Tasks.Task", b =>
                {
                    b.HasOne("Slavestefan.Aphrodite.Model.Tasks.TaskSet", null)
                        .WithMany("Tasks")
                        .HasForeignKey("TaskSetIdTaskSet");
                });

            modelBuilder.Entity("Slavestefan.Aphrodite.Model.Tasks.TaskHistory", b =>
                {
                    b.HasOne("Slavestefan.Aphrodite.Model.Users.User", "Picker")
                        .WithMany()
                        .HasForeignKey("PickerIdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Slavestefan.Aphrodite.Model.Tasks.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskIdTask")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Slavestefan.Aphrodite.Model.Tasks.TaskSet", b =>
                {
                    b.HasOne("Slavestefan.Aphrodite.Model.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerIdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Slavestefan.Aphrodite.Model.Users.User", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientIdUser");
                });

            modelBuilder.Entity("Slavestefan.Aphrodite.Model.Tracker.Counter", b =>
                {
                    b.HasOne("Slavestefan.Aphrodite.Model.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserIdUser");
                });

            modelBuilder.Entity("Slavestefan.Aphrodite.Model.Tracker.CounterHistory", b =>
                {
                    b.HasOne("Slavestefan.Aphrodite.Model.Users.User", "ByUser")
                        .WithMany()
                        .HasForeignKey("ByUserIdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Slavestefan.Aphrodite.Model.Tracker.Counter", "Counter")
                        .WithMany()
                        .HasForeignKey("CounterIdCounter")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Slavestefan.Aphrodite.Model.Users.OwnerSlaveRelationship", b =>
                {
                    b.HasOne("Slavestefan.Aphrodite.Model.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerIdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Slavestefan.Aphrodite.Model.Users.User", "Slave")
                        .WithMany()
                        .HasForeignKey("SlaveIdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Slavestefan.Aphrodite.Model.Users.UserAlias", b =>
                {
                    b.HasOne("Slavestefan.Aphrodite.Model.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserIdUser");
                });
#pragma warning restore 612, 618
        }
    }
}
